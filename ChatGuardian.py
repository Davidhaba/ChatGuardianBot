import sqlite3
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest
import random
from functools import wraps
import logging
from datetime import datetime, timedelta, UTC

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.ERROR)
logger = logging.getLogger(__name__)

TOKEN = '7680787360:AAGn3IkylYRN5xewaud-cfykEvRdz7L66oI'

def init_db():
    with sqlite3.connect('bot.db') as conn:
        c = conn.cursor()
        c.execute('CREATE TABLE IF NOT EXISTS warnings (user_id INTEGER, chat_id INTEGER, count INTEGER DEFAULT 0, PRIMARY KEY (user_id, chat_id))')
        c.execute('CREATE TABLE IF NOT EXISTS rules (chat_id INTEGER PRIMARY KEY, rules_text TEXT NOT NULL)')
        c.execute('CREATE TABLE IF NOT EXISTS welcome (chat_id INTEGER PRIMARY KEY, message TEXT)')
        c.execute('CREATE TABLE IF NOT EXISTS nicknames (user_id INTEGER, chat_id INTEGER, nickname TEXT, PRIMARY KEY (user_id, chat_id))')
        conn.commit()

init_db()

def safe_message(func):
    @wraps(func)
    async def wrapper(update: Update, context): return await func(update, context) if update and update.message and update.message.chat else None
    return wrapper

def with_db(func):
    @wraps(func)
    async def wrapper(update: Update, context):
        with sqlite3.connect('bot.db') as conn:
            try: return await func(update, context, conn.cursor())
            except Exception as e: logger.error(f"DB error: {e}"); conn.rollback()
    return wrapper

def admin_only(func):
    @wraps(func)
    @safe_message
    async def wrapper(update: Update, context):
        chat = update.message.chat
        if chat.type in ['group', 'supergroup']:
            admins = [admin.user.id for admin in await chat.get_administrators()]
            if update.message.from_user.id not in admins: return await update.message.reply_text('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!')
            if context.bot.id not in admins: return await update.message.reply_text('‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!')
            return await func(update, context)
    return wrapper

@safe_message
async def cmd_start(update: Update, context): 
    if update.message.chat.type == 'private': await update.message.reply_text('üîπ –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —á–∞—Ç—É. /help - –∫–æ–º–∞–Ω–¥–∏')

@safe_message
async def cmd_help(update: Update, context): 
    await update.message.reply_text("üìö –ö–æ–º–∞–Ω–¥–∏:\n/start\n/rules\n/setrules [—Ç–µ–∫—Å—Ç]\n/setwelcome [—Ç–µ–∫—Å—Ç]\n/warn [–ø—Ä–∏—á–∏–Ω–∞]\n/ban [–ø—Ä–∏—á–∏–Ω–∞]\n/kick [–ø—Ä–∏—á–∏–Ω–∞]\n/mute [—á–∞—Å] [–ø—Ä–∏—á–∏–Ω–∞]\n/unmute\n/unban\n/unwarn\n/joke\n*–£—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è (warn, ban —Ç–æ—â–æ) –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞*")

@safe_message
@with_db
async def cmd_rules(update: Update, context, cursor): 
    cursor.execute('SELECT rules_text FROM rules WHERE chat_id = ?', (update.message.chat.id,))
    await update.message.reply_text(f'üìú –ü—Ä–∞–≤–∏–ª–∞:\n{cursor.fetchone()[0]}' if cursor.fetchone() else '‚ùå –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ')

@admin_only
@with_db
async def cmd_setrules(update: Update, context, cursor): 
    if context.args: 
        cursor.execute('INSERT OR REPLACE INTO rules VALUES (?, ?)', (update.message.chat.id, ' '.join(context.args))); cursor.connection.commit()
        await update.message.reply_text('‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
    else: await update.message.reply_text('‚ÑπÔ∏è –í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª')

@admin_only
@with_db
async def cmd_setwelcome(update: Update, context, cursor): 
    text = update.message.text.partition(' ')[2].strip()
    if text: 
        cursor.execute('INSERT OR REPLACE INTO welcome VALUES (?, ?)', (update.message.chat.id, text)); cursor.connection.commit()
        await update.message.reply_text('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!')
    else: await update.message.reply_text('‚ÑπÔ∏è –í–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è')

@with_db
async def get_welcome(update: Update, context, cursor): 
    cursor.execute('SELECT message FROM welcome WHERE chat_id = ?', (update.message.chat.id,))
    result = cursor.fetchone()
    return result[0] if result else None

@safe_message
async def cmd_show_welcome(update: Update, context): 
    msg = await get_welcome(update, context)
    await update.message.reply_text(f'üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:\n{msg}' if msg else '‚ùå –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

@safe_message
async def welcome_message(update: Update, context): 
    if msg := await get_welcome(update, context):
        for member in update.message.new_chat_members:
            await update.message.reply_text(msg.replace('{name}', await get_user_link(member, update.message.chat.id)), parse_mode='MarkdownV2', disable_web_page_preview=True)

@safe_message
@with_db
async def cmd_set_nickname(update: Update, context, cursor):
    if not context.args:
        await update.message.reply_text('‚ÑπÔ∏è –í–∫–∞–∂—ñ—Ç—å –Ω—ñ–∫–Ω–µ–π–º: +–Ω—ñ–∫ [–Ω—ñ–∫–Ω–µ–π–º]')
        return
    user_id = update.message.from_user.id
    chat_id = update.message.chat.id
    nickname = ' '.join(context.args)
    cursor.execute('INSERT OR REPLACE INTO nicknames VALUES (?, ?, ?)', (user_id, chat_id, nickname))
    cursor.connection.commit()
    await update.message.reply_text(f'‚úÖ –ù—ñ–∫–Ω–µ–π–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')

@safe_message
@with_db
async def cmd_remove_nickname(update: Update, context, cursor):
    user_id = update.message.from_user.id
    chat_id = update.message.chat.id
    cursor.execute('DELETE FROM nicknames WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    cursor.connection.commit()
    await update.message.reply_text('‚úÖ –ù—ñ–∫–Ω–µ–π–º –≤–∏–¥–∞–ª–µ–Ω–æ!' if cursor.rowcount > 0 else '‚ÑπÔ∏è –ù—ñ–∫–Ω–µ–π–º –Ω–µ –±—É–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π')

@safe_message
@with_db
async def cmd_show_nickname(update: Update, context, cursor):
    user_id = update.message.from_user.id
    chat_id = update.message.chat.id
    nickname = await get_nickname(user_id, chat_id)
    await update.message.reply_text(f'üë§ –í–∞—à –Ω—ñ–∫–Ω–µ–π–º: {nickname}' if nickname else '‚ÑπÔ∏è –ù—ñ–∫–Ω–µ–π–º –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

@with_db
async def get_nickname(user_id, chat_id, cursor):
    cursor.execute('SELECT nickname FROM nicknames WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    result = cursor.fetchone()
    return result[0] if result else None

async def get_user_link(member, chat_id=None):
    if chat_id:
        nickname = await get_nickname(member.id, chat_id)
        name = nickname if nickname else member.full_name
    else:
        name = member.full_name
    name = ''.join(f'\\{c}' if c in '_*[]()~`>#+-=|{{}}.!' else c for c in name)
    return f"[{name}](https://t.me/{member.username})" if member.username else f"[{name}](tg://user?id={member.id})"

@admin_only
@with_db
async def cmd_remove_welcome(update: Update, context, cursor): 
    cursor.execute('DELETE FROM welcome WHERE chat_id = ?', (update.message.chat.id,)); cursor.connection.commit()
    await update.message.reply_text('‚úÖ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!' if cursor.rowcount > 0 else '‚ÑπÔ∏è –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –Ω–µ –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')

@safe_message
async def cmd_joke(update: Update, context): 
    await update.message.reply_text(random.choice(['–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –ø—ñ—à–æ–≤ —É –ª—ñ—Å? ‚Äî –ë–æ —Ç–∞–º –Ω–µ–º–∞—î –±–∞–≥—ñ–≤!', '–ö–æ–¥ –±–æ—Ç—É: "–ü—Ä–∞—Ü—é–π –∞–±–æ –ø–∞–¥–∞–π!"']))

@admin_only
@with_db
async def cmd_warn(update: Update, context, cursor):
    target_id, reason = await parse_target(update, context)
    if target_id:
        chat_id = update.message.chat.id
        cursor.execute('INSERT INTO warnings VALUES (?, ?, 1) ON CONFLICT(user_id, chat_id) DO UPDATE SET count = count + 1', (target_id, chat_id))
        cursor.execute('SELECT count FROM warnings WHERE user_id = ? AND chat_id = ?', (target_id, chat_id))
        count = cursor.fetchone()[0]; cursor.connection.commit()
        target = await context.bot.get_chat(target_id); target_link = await get_user_link(target, chat_id); mod_link = await get_user_link(update.message.from_user, chat_id)
        await update.message.reply_text(f"‚ö†Ô∏è {target_link} –æ—Ç—Ä–∏–º—É—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è \\({count}/3\\)\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {mod_link}", parse_mode='MarkdownV2', disable_web_page_preview=True)
        if count >= 3:
            try:
                await context.bot.ban_chat_member(chat_id, target_id)
                await update.message.reply_text(f"üö´ {target_link} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ\\!\n–ü—Ä–∏—á–∏–Ω–∞: –ª—ñ–º—ñ—Ç –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å \\(3/3\\)\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {mod_link}\n–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ", parse_mode='MarkdownV2', disable_web_page_preview=True)
                cursor.execute('UPDATE warnings SET count = 0 WHERE user_id = ? AND chat_id = ?', (target_id, chat_id)); cursor.connection.commit()
            except BadRequest as e: await handle_errors(update, e)

@admin_only
async def cmd_ban(update: Update, context):
    target_id, reason = await parse_target(update, context)
    if target_id:
        try:
            target = await context.bot.get_chat(target_id); target_link = await get_user_link(target, update.message.chat.id); mod_link = await get_user_link(update.message.from_user, update.message.chat.id)
            await context.bot.ban_chat_member(update.message.chat.id, target_id)
            await update.message.reply_text(f"üö´ {target_link} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ\\!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {mod_link}", parse_mode='MarkdownV2', disable_web_page_preview=True)
        except BadRequest as e: await handle_errors(update, e)

@admin_only
async def cmd_kick(update: Update, context):
    target_id, reason = await parse_target(update, context)
    if target_id:
        chat_id = update.message.chat.id
        try:
            target = await context.bot.get_chat(target_id); target_link = await get_user_link(target, chat_id); mod_link = await get_user_link(update.message.from_user, chat_id)
            await context.bot.ban_chat_member(chat_id, target_id); await context.bot.unban_chat_member(chat_id, target_id)
            await update.message.reply_text(f"üë¢ {target_link} –≤–∏–¥–∞–ª–µ–Ω–æ\\!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {mod_link}", parse_mode='MarkdownV2', disable_web_page_preview=True)
        except BadRequest as e: await handle_errors(update, e)

async def unmute_callback(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id, user_id = job.data
    target = await context.bot.get_chat(user_id)
    target_link = await get_user_link(target, chat_id)
    await context.bot.restrict_chat_member(chat_id=chat_id, user_id=user_id, permissions={"can_send_messages": True})
    await context.bot.send_message(chat_id=chat_id, text=f"üîä {target_link} –∑–Ω–æ–≤—É –º–æ–∂–µ –ø–∏—Å–∞—Ç–∏\\!", parse_mode='MarkdownV2', disable_web_page_preview=True)

@admin_only
async def cmd_mute(update: Update, context):
    target_id, args = await parse_target(update, context, True)
    if target_id:
        chat_id = update.message.chat.id
        try:
            duration, reason = parse_duration_and_reason(args) if args else (3600, "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏")
            target = await context.bot.get_chat(target_id); target_link = await get_user_link(target, chat_id); mod_link = await get_user_link(update.message.from_user, chat_id)
            until_date = datetime.now(UTC) + timedelta(seconds=duration)
            await context.bot.restrict_chat_member(chat_id, target_id, permissions={"can_send_messages": False}, until_date=until_date)
            await update.message.reply_text(f"üîá {target_link} –∑–∞–º—É—á–µ–Ω–æ –Ω–∞ {format_duration(duration)}\\!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {mod_link}", parse_mode='MarkdownV2', disable_web_page_preview=True)
            context.job_queue.run_once(unmute_callback, duration, data=(chat_id, target_id), name=f"unmute_{chat_id}_{target_id}")
        except BadRequest as e: await handle_errors(update, e)

@admin_only
async def cmd_unmute(update: Update, context):
    target_id, reason = await parse_target(update, context)
    if target_id:
        chat_id = update.message.chat.id
        try:
            target = await context.bot.get_chat(target_id); target_link = await get_user_link(target, chat_id); mod_link = await get_user_link(update.message.from_user, chat_id)
            await context.bot.restrict_chat_member(chat_id, target_id, permissions={"can_send_messages": True})
            await update.message.reply_text(f"üîä {target_link} —Ä–æ–∑–º—É—á–µ–Ω–æ\\!\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {mod_link}", parse_mode='MarkdownV2', disable_web_page_preview=True)
            current_jobs = context.job_queue.get_jobs_by_name(f"unmute_{chat_id}_{target_id}")
            for job in current_jobs:
                job.schedule_removal()
        except BadRequest as e: await handle_errors(update, e)

@admin_only
async def cmd_unban(update: Update, context):
    target_id, reason = await parse_target(update, context)
    if target_id:
        chat_id = update.message.chat.id
        try:
            target = await context.bot.get_chat(target_id); target_link = await get_user_link(target, chat_id); mod_link = await get_user_link(update.message.from_user, chat_id)
            await context.bot.unban_chat_member(chat_id, target_id)
            await update.message.reply_text(f"‚úÖ {target_link} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ\\!\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {mod_link}", parse_mode='MarkdownV2', disable_web_page_preview=True)
        except BadRequest as e: await handle_errors(update, e)

@admin_only
@with_db
async def cmd_unwarn(update: Update, context, cursor):
    target_id, reason = await parse_target(update, context)
    if target_id:
        chat_id = update.message.chat.id
        cursor.execute('UPDATE warnings SET count = count - 1 WHERE user_id = ? AND chat_id = ? AND count > 0', (target_id, chat_id)); cursor.connection.commit()
        count = cursor.execute('SELECT count FROM warnings WHERE user_id = ? AND chat_id = ?', (target_id, chat_id)).fetchone()[0] if cursor.rowcount > 0 else 0
        await update.message.reply_text(f"‚úÖ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –∑–Ω—è—Ç–æ –∑ {target_id}\n–ó–∞–≥–∞–ª–æ–º: {count}/3" if cursor.rowcount > 0 else "‚ÑπÔ∏è –ù–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å")

async def parse_target(update: Update, context, return_args=False):
    args = context.args; reason = "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"; target = update.message.reply_to_message.from_user.id if update.message.reply_to_message else None
    if not target:
        await update.message.reply_text("‚ÑπÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏!")
        return None, args if return_args else reason
    if target == update.message.from_user.id:
        await update.message.reply_text("‚ùå –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞ —Å–æ–±—ñ!")
        return None, args if return_args else reason
    reason = ' '.join(args) or reason
    return target, args if return_args else reason

def parse_duration_and_reason(args):
    if not args: return 3600, "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
    time_str = args[0].lower(); reason = ' '.join(args[1:]) or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"
    units = {'—Å': 1, '—Å–µ–∫': 1, '—Ö–≤': 60, '–≥–æ–¥': 3600, '–¥': 86400, '–¥–Ω—ñ–≤': 86400, '—Ä': 31536000, '—Ä–æ–∫—ñ–≤': 31536000}
    for unit, seconds in units.items():
        if time_str.endswith(unit):
            try: return int(time_str[:-len(unit)]) * seconds, reason
            except ValueError: break
    return 3600, ' '.join(args)

def format_duration(seconds):
    if seconds < 60: return f"{seconds} —Å–µ–∫"
    elif seconds < 3600: return f"{seconds // 60} —Ö–≤"
    elif seconds < 86400: return f"{seconds // 3600} –≥–æ–¥"
    elif seconds < 31536000: return f"{seconds // 86400} –¥–Ω—ñ–≤"
    return f"{seconds // 31536000} —Ä–æ–∫—ñ–≤"

async def handle_errors(update: Update, error: BadRequest):
    error_msg = str(error).lower()
    errors = {
        "not enough rights": "‚ùå –ë–æ—Ç—É –±—Ä–∞–∫—É—î –ø—Ä–∞–≤!\n–ù–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –ø—Ä–∞–≤–∞.",
        "user not found": "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
        "chat_admin_required": "‚ùå –ë–æ—Ç –Ω–µ –∞–¥–º—ñ–Ω!\n–î–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        "user is an administrator": "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á - –∞–¥–º—ñ–Ω!",
        "can't restrict self": "‚ùå –ù–µ –º–æ–∂—É –∑–∞–º—É—Ç–∏—Ç–∏ —Å–µ–±–µ!",
        "user is not a member": "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ —á–∞—Ç—ñ!",
        "too many requests": "‚ùå –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤! –ó–∞—á–µ–∫–∞–π—Ç–µ.",
        "can't parse entities": "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É!",
        "chat not found": "‚ùå –ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
        "bot was kicked": "‚ùå –ë–æ—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–∞—Ç—É!"
    }
    for key, msg in errors.items():
        if key in error_msg: return await update.message.reply_text(msg)
    await update.message.reply_text(f"‚ùó –ü–æ–º–∏–ª–∫–∞: {error}")

command_map = {
    '–ø—Ä–∏–≤—ñ—Ç–∞–π—Å—è': cmd_show_welcome, '+–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è': cmd_setwelcome, '-–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è': cmd_remove_welcome, '–±–∞–Ω': cmd_ban, '-–±–∞–Ω': cmd_ban,
    '—É–Ω–±–∞–Ω': cmd_unban, '–≤–∞—Ä–Ω': cmd_warn, '-–≤–∞—Ä–Ω': cmd_warn, '—É–Ω–≤–∞—Ä–Ω': cmd_unwarn, '–¥–æ–ø–æ–º–æ–≥–∞': cmd_help, '–ø—Ä–∞–≤–∏–ª–∞': cmd_rules,
    '+–ø—Ä–∞–≤–∏–ª–∞': cmd_setrules, '–∂–∞—Ä—Ç': cmd_joke, '–∫—ñ–∫': cmd_kick, '–º—É—Ç': cmd_mute, '–∞–Ω–º—É—Ç': cmd_unmute, '—É–Ω–º—É—Ç': cmd_unmute,
    '+–Ω—ñ–∫': cmd_set_nickname, '-–Ω—ñ–∫': cmd_remove_nickname, '–Ω—ñ–∫': cmd_show_nickname
}

async def handle_text(update: Update, context):
    words = update.message.text.strip().split()
    if words and words[0] in command_map: context.args = words[1:]; await command_map[words[0]](update, context)

async def error_handler(update: object, context): 
    logger.error("Exception:", exc_info=context.error)
    if update and hasattr(update, 'message'): await update.message.reply_text('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞')

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handlers([
        CommandHandler('start', cmd_start), CommandHandler('help', cmd_help), CommandHandler('rules', cmd_rules),
        CommandHandler('setrules', cmd_setrules), CommandHandler('setwelcome', cmd_setwelcome), CommandHandler('joke', cmd_joke),
        CommandHandler('warn', cmd_warn), CommandHandler('ban', cmd_ban), CommandHandler('kick', cmd_kick), CommandHandler('mute', cmd_mute),
        CommandHandler('unmute', cmd_unmute), CommandHandler('unban', cmd_unban), CommandHandler('unwarn', cmd_unwarn),
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome_message), MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
    ])
    app.add_error_handler(error_handler)
    app.run_polling()

if __name__ == '__main__':
    main()